<?php

namespace Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setLastName($lastName)
    {
        $this->__load();
        return parent::setLastName($lastName);
    }

    public function getLastName()
    {
        $this->__load();
        return parent::getLastName();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setCoins($coins)
    {
        $this->__load();
        return parent::setCoins($coins);
    }

    public function getCoins()
    {
        $this->__load();
        return parent::getCoins();
    }

    public function setExperience($experience)
    {
        $this->__load();
        return parent::setExperience($experience);
    }

    public function getExperience()
    {
        $this->__load();
        return parent::getExperience();
    }

    public function setVictories($victories)
    {
        $this->__load();
        return parent::setVictories($victories);
    }

    public function getVictories()
    {
        $this->__load();
        return parent::getVictories();
    }

    public function setBestScore($bestScore)
    {
        $this->__load();
        return parent::setBestScore($bestScore);
    }

    public function getBestScore()
    {
        $this->__load();
        return parent::getBestScore();
    }

    public function setUnbeaten($unbeaten)
    {
        $this->__load();
        return parent::setUnbeaten($unbeaten);
    }

    public function getUnbeaten()
    {
        $this->__load();
        return parent::getUnbeaten();
    }

    public function setLives($lives)
    {
        $this->__load();
        return parent::setLives($lives);
    }

    public function getLives()
    {
        $this->__load();
        return parent::getLives();
    }

    public function setLastGameDatetime($lastGameDatetime)
    {
        $this->__load();
        return parent::setLastGameDatetime($lastGameDatetime);
    }

    public function getLastGameDatetime()
    {
        $this->__load();
        return parent::getLastGameDatetime();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setCover($cover)
    {
        $this->__load();
        return parent::setCover($cover);
    }

    public function getCover()
    {
        $this->__load();
        return parent::getCover();
    }

    public function setUserIdFb($userIdFb)
    {
        $this->__load();
        return parent::setUserIdFb($userIdFb);
    }

    public function getUserIdFb()
    {
        $this->__load();
        return parent::getUserIdFb();
    }

    public function setIsPremium($isPremium)
    {
        $this->__load();
        return parent::setIsPremium($isPremium);
    }

    public function getIsPremium()
    {
        $this->__load();
        return parent::getIsPremium();
    }

    public function setCodePassword($codePassword)
    {
        $this->__load();
        return parent::setCodePassword($codePassword);
    }

    public function getCodePassword()
    {
        $this->__load();
        return parent::getCodePassword();
    }

    public function setRequestPassword($requestPassword)
    {
        $this->__load();
        return parent::setRequestPassword($requestPassword);
    }

    public function getRequestPassword()
    {
        $this->__load();
        return parent::getRequestPassword();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'lastName', 'email', 'password', 'coins', 'experience', 'victories', 'bestScore', 'unbeaten', 'lives', 'lastGameDatetime', 'image', 'cover', 'userIdFb', 'isPremium', 'codePassword', 'requestPassword');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}